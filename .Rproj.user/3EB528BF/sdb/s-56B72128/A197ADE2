{
    "contents" : "#########################################################################################################\n\n## Coursera Getting and Cleaning Data Course Project\n## Heather Wade\n## 2014-04-27\n\n# runAnalysis.r File Description:\n\n# This script will perform the following steps on the UCI HAR Dataset downloaded from \n# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip \n# 1. Merge the training and the test sets to create one data set.\n# 2. Extract only the measurements on the mean and standard deviation for each measurement. \n# 3. Use descriptive activity names to name the activities in the data set\n# 4. Appropriately label the data set with descriptive activity names. \n# 5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject. \n\n##########################################################################################################\n\n\n# Clean up workspace\nrm(list=ls())\n\n# 1. Merge the training and the test sets to create one data set.\n\n#set working directory to the location where the UCI HAR Dataset was unzipped\nsetwd('UCI HAR Dataset/');\n\n# Read in the data from files\nfeatures     = read.table('./features.txt',header=FALSE); #imports features.txt\nactivityType = read.table('./activity_labels.txt',header=FALSE); #imports activity_labels.txt\nsubjectTrain = read.table('./train/subject_train.txt',header=FALSE); #imports subject_train.txt\nxTrain       = read.table('./train/x_train.txt',header=FALSE); #imports x_train.txt\nyTrain       = read.table('./train/y_train.txt',header=FALSE); #imports y_train.txt\n\n# Assigin column names to the data imported above\ncolnames(activityType)  = c('activityId','activityType');\ncolnames(subjectTrain)  = \"subjectId\";\ncolnames(xTrain)        = features[,2]; \ncolnames(yTrain)        = \"activityId\";\n\n# cCreate the final training set by merging yTrain, subjectTrain, and xTrain\ntrainingData = cbind(yTrain,subjectTrain,xTrain);\n\n# Read in the test data\nsubjectTest = read.table('./test/subject_test.txt',header=FALSE); #imports subject_test.txt\nxTest       = read.table('./test/x_test.txt',header=FALSE); #imports x_test.txt\nyTest       = read.table('./test/y_test.txt',header=FALSE); #imports y_test.txt\n\n# Assign column names to the test data imported above\ncolnames(subjectTest) = \"subjectId\";\ncolnames(xTest)       = features[,2]; \ncolnames(yTest)       = \"activityId\";\n\n\n# Create the final test set by merging the xTest, yTest and subjectTest data\ntestData = cbind(yTest,subjectTest,xTest);\n\n\n# Combine training and test data to create a final data set\nfinalData = rbind(trainingData,testData);\n\n# Create a vector for the column names from the finalData, which will be used\n# to select the desired mean() & stddev() columns\ncolNames  = colnames(finalData); \n\n# 2. Extract only the measurements on the mean and standard deviation for each measurement. \n\n# Create a logicalVector that contains TRUE values for the ID, mean() & stddev() columns and FALSE for others\nlogicalVector = (grepl(\"activity..\",colNames) | grepl(\"subject..\",colNames) | grepl(\"-mean..\",colNames) & !grepl(\"-meanFreq..\",colNames) & !grepl(\"mean..-\",colNames) | grepl(\"-std..\",colNames) & !grepl(\"-std()..-\",colNames));\n\n# Subset finalData table based on the logicalVector to keep only desired columns\nfinalData = finalData[logicalVector==TRUE];\n\n# 3. Use descriptive activity names to name the activities in the data set\n\n# Merge the finalData set with the acitivityType table to include descriptive activity names\nfinalData = merge(finalData,activityType,by='activityId',all.x=TRUE);\n\n# Updating the colNames vector to include the new column names after merge\ncolNames  = colnames(finalData); \n\n# 4. Appropriately label the data set with descriptive activity names. \n\n# Cleaning up the variable names\nfor (i in 1:length(colNames)) \n{\n  colNames[i] = gsub(\"\\\\()\",\"\",colNames[i])\n  colNames[i] = gsub(\"-std$\",\"StdDev\",colNames[i])\n  colNames[i] = gsub(\"-mean\",\"Mean\",colNames[i])\n  colNames[i] = gsub(\"^(t)\",\"time\",colNames[i])\n  colNames[i] = gsub(\"^(f)\",\"freq\",colNames[i])\n  colNames[i] = gsub(\"([Gg]ravity)\",\"Gravity\",colNames[i])\n  colNames[i] = gsub(\"([Bb]ody[Bb]ody|[Bb]ody)\",\"Body\",colNames[i])\n  colNames[i] = gsub(\"[Gg]yro\",\"Gyro\",colNames[i])\n  colNames[i] = gsub(\"AccMag\",\"AccMagnitude\",colNames[i])\n  colNames[i] = gsub(\"([Bb]odyaccjerkmag)\",\"BodyAccJerkMagnitude\",colNames[i])\n  colNames[i] = gsub(\"JerkMag\",\"JerkMagnitude\",colNames[i])\n  colNames[i] = gsub(\"GyroMag\",\"GyroMagnitude\",colNames[i])\n};\n\n# Reassigning the new descriptive column names to the finalData set\ncolnames(finalData) = colNames;\n\n# 5. Create a second, independent tidy data set with the average of each variable for each activity and each subject. \n\n# Create a new table, finalDataNoActivityType without the activityType column\nfinalDataNoActivityType  = finalData[,names(finalData) != 'activityType'];\n\n# Summarizing the finalDataNoActivityType table to include just the mean of each variable for each activity and each subject\ntidyData    = aggregate(finalDataNoActivityType[,names(finalDataNoActivityType) != c('activityId','subjectId')],by=list(activityId=finalDataNoActivityType$activityId,subjectId = finalDataNoActivityType$subjectId),mean);\n\n# Merging the tidyData with activityType to include descriptive acitvity names\ntidyData    = merge(tidyData,activityType,by='activityId',all.x=TRUE);\n\n# Export the tidyData set \nwrite.table(tidyData, './tidyData.txt',row.names=TRUE,sep='\\t');",
    "created" : 1414175136641.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2360784347",
    "id" : "A197ADE2",
    "lastKnownWriteTime" : 1414174661,
    "path" : "~/GitHub/Getting-and-Cleaning-Data-Course-Project/t2.R",
    "project_path" : "t2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}